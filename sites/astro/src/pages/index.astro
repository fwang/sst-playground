---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import blue from '../images/blue.png';
import { Config } from "sst/node/config";
import { Function } from "sst/node/function";

// Fetch
const ret = await fetch("https://postman-echo.com/get", {
	headers: {
		"foo": "bar",
	}
});
const json = await ret.json();

// Environment variables
const processEnv = {};
Object.entries(process.env)
	.filter(([key, _]) => key.startsWith("SST_") || key === "FUNCTION_NAME")
	.forEach(([key, value]) => { processEnv[key] = value; });

---

<Layout title="Welcome to Astro.">
	<h1>Test images</h1>
	<img src={blue} />
	<img src="/images/yellow.png" />
	<h1>Test fetch in SSR</h1>
	<pre>{JSON.stringify(json, null, 4)}</pre>
	<h1>Test process.env in SSR</h1>
	<pre>{JSON.stringify(processEnv, null, 4)}</pre>
	<h1>Test sst/node in SSR</h1>
	<pre>function.name: {Function.ConfigFunction.functionName}</pre>
	<pre>secret.value: {Config.STRIPE_KEY}</pre>
	<main>
		<h1>Welcome to <span class="text-gradient">Astro</span></h1>
		<p class="instructions">
			To get started, open the directory <code>src/pages</code> in your project.<br />
			<strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
		</p>
		<ul role="list" class="link-card-grid">
			<Card
				href="https://docs.astro.build/"
				title="Documentation"
				body="Learn how Astro works and explore the official API docs."
			/>
			<Card
				href="https://astro.build/integrations/"
				title="Integrations"
				body="Supercharge your project with new frameworks and libraries."
			/>
			<Card
				href="https://astro.build/themes/"
				title="Themes"
				body="Explore a galaxy of community-built starter themes."
			/>
			<Card
				href="https://astro.build/chat/"
				title="Community"
				body="Come say hi to our amazing Discord community. ❤️"
			/>
		</ul>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
