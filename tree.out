<ref *1> EmptyStack {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {
      CustomResourceHandler: [Function],
      demoSTRIPE: [Secret],
      demoFunction: [Function],
      demoSTRIPE2: [Secret],
      demoFunction2: [Function],
      SSTStackOutputf1Name: [CfnOutput],
      SSTStackOutputf1Url: [CfnOutput]
    },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'dev-playground-demo',
    scope: App {
      node: [Node],
      policyValidationBeta1: [],
      parentStage: undefined,
      region: 'us-east-1',
      account: '112245769880',
      _assemblyBuilder: [CloudAssemblyBuilder],
      stageName: '',
      _treeMetadata: true,
      local: false,
      mode: 'deploy',
      name: 'playground',
      stage: 'dev',
      debugScriptVersion: undefined,
      debugIncreaseTimeout: undefined,
      appPath: '/Users/frank/Sites/sst-playground',
      isActiveStack: undefined,
      defaultFunctionProps: [Array],
      _defaultRemovalPolicy: 'destroy',
      isFinished: false,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  _missingContext: [],
  _stackDependencies: {},
  templateOptions: {},
  _crossRegionReferences: false,
  _suppressTemplateIndentation: false,
  _logicalIds: LogicalIDs { renames: {}, reverse: {} },
  account: '112245769880',
  region: 'us-east-1',
  environment: 'aws://112245769880/us-east-1',
  terminationProtection: undefined,
  _stackName: 'dev-playground-demo',
  tags: TagManager {
    tags: Map(0) {},
    priorities: Map(0) {},
    externalTagPriority: 50,
    resourceTypeName: 'aws:cdk:stack',
    tagFormatter: KeyValueFormatter {},
    tagPropertyName: 'tags',
    didHaveInitialTags: false,
    renderedTags: LazyAny {
      producer: [Object],
      cache: true,
      creationStack: [Array],
      options: {}
    }
  },
  artifactId: 'dev-playground-demo',
  templateFile: 'dev-playground-demo.template.json',
  _versionReportingEnabled: undefined,
  synthesizer: DefaultStackSynthesizer {
    _boundStack: [Circular *1],
    qualifier: 'hnb659fds',
    bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
    repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
    _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
    _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
    fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
    imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
    lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
    bucketPrefix: '',
    dockerTagPrefix: '',
    bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
  },
  stage: 'dev',
  defaultFunctionProps: [ { runtime: 'nodejs16.x', nodejs: [Object] } ],
  customResourceHandler: <ref *2> Function {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'CustomResourceHandler',
      scope: [Circular *1]
    },
    stack: [Circular *1],
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.659]}',
    _warnIfCurrentVersionCalled: false,
    _invocationGrants: {},
    _functionUrlInvocationGrants: {},
    permissionsNode: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'CustomResourceHandler',
      scope: [Circular *1]
    },
    canCreatePermissions: true,
    _layers: [],
    environment: {},
    hashMixins: [],
    role: <ref *3> Role {
      node: [Node],
      stack: [Circular *1],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.660]}',
      grantPrincipal: [Circular *3],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: Map(0) {},
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.669]}',
      roleArn: '${Token[TOKEN.667]}',
      _roleId: '${Token[TOKEN.666]}',
      policyFragment: [PrincipalPolicyFragment],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    grantPrincipal: <ref *3> Role {
      node: [Node],
      stack: [Circular *1],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.660]}',
      grantPrincipal: [Circular *3],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: Map(0) {},
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.669]}',
      roleArn: '${Token[TOKEN.667]}',
      _roleId: '${Token[TOKEN.666]}',
      policyFragment: [PrincipalPolicyFragment],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    _architecture: undefined,
    functionName: '${Token[TOKEN.678]}',
    functionArn: '${Token[TOKEN.679]}',
    runtime: Runtime {
      name: 'nodejs16.x',
      supportsInlineCode: true,
      family: 0,
      isVariable: false,
      bundlingDockerImage: [DockerImage],
      bundlingImage: [DockerImage],
      supportsCodeGuruProfiling: false,
      supportsSnapStart: false
    },
    timeout: Duration { amount: 900, unit: [TimeUnit] },
    architecture: Architecture { name: 'x86_64', dockerPlatform: 'linux/amd64' },
    currentVersionOptions: undefined,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  isActive: true,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Function {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: { ServiceRole: [Role], Code: [Asset], Resource: [CfnFunction] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'CustomResourceHandler',
    scope: EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Circular *1],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: [Circular *1],
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.659]}',
  _warnIfCurrentVersionCalled: false,
  _invocationGrants: {},
  _functionUrlInvocationGrants: {},
  permissionsNode: Node {
    host: [Circular *1],
    _locked: false,
    _children: { ServiceRole: [Role], Code: [Asset], Resource: [CfnFunction] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'CustomResourceHandler',
    scope: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Circular *1],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  canCreatePermissions: true,
  _layers: [],
  environment: {},
  hashMixins: [],
  role: <ref *3> Role {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'ServiceRole',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Circular *1],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.660]}',
    grantPrincipal: [Circular *3],
    principalAccount: '112245769880',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [] },
    dependables: Map(0) {},
    _didSplit: false,
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.669]}',
    roleArn: '${Token[TOKEN.667]}',
    _roleId: '${Token[TOKEN.666]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  grantPrincipal: <ref *3> Role {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'ServiceRole',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Circular *1],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.660]}',
    grantPrincipal: [Circular *3],
    principalAccount: '112245769880',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [] },
    dependables: Map(0) {},
    _didSplit: false,
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.669]}',
    roleArn: '${Token[TOKEN.667]}',
    _roleId: '${Token[TOKEN.666]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  _architecture: undefined,
  functionName: '${Token[TOKEN.678]}',
  functionArn: '${Token[TOKEN.679]}',
  runtime: Runtime {
    name: 'nodejs16.x',
    supportsInlineCode: true,
    family: 0,
    isVariable: false,
    bundlingDockerImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs16.x',
      _imageHash: undefined
    },
    bundlingImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs16.x',
      _imageHash: undefined
    },
    supportsCodeGuruProfiling: false,
    supportsSnapStart: false
  },
  timeout: Duration {
    amount: 900,
    unit: TimeUnit { label: 'seconds', isoLabel: 'S', inMillis: 1000 }
  },
  architecture: Architecture { name: 'x86_64', dockerPlatform: 'linux/amd64' },
  currentVersionOptions: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Role {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: { ImportServiceRole: [ImportedRole], Resource: [CfnRole] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [ [Object] ],
    id: 'ServiceRole',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Circular *1],
      grantPrincipal: [Circular *1],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Circular *1],
      grantPrincipal: [Circular *1],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.660]}',
  grantPrincipal: [Circular *1],
  principalAccount: '112245769880',
  assumeRoleAction: 'sts:AssumeRole',
  managedPolicies: [
    AwsManagedPolicy {
      managedPolicyArn: 'arn:${Token[AWS.Partition.8]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    }
  ],
  attachedPolicies: AttachedPolicies { policies: [] },
  dependables: Map(0) {},
  _didSplit: false,
  assumeRolePolicy: PolicyDocument {
    statements: [ [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  inlinePolicies: {},
  permissionsBoundary: undefined,
  roleName: '${Token[TOKEN.669]}',
  roleArn: '${Token[TOKEN.667]}',
  _roleId: '${Token[TOKEN.666]}',
  policyFragment: PrincipalPolicyFragment {
    principalJson: { AWS: [Array] },
    conditions: {}
  },
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> ImportedRole {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'ImportServiceRole',
    scope: <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.660]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: Map(0) {},
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.669]}',
      roleArn: '${Token[TOKEN.667]}',
      _roleId: '${Token[TOKEN.666]}',
      policyFragment: [PrincipalPolicyFragment],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *3> EmptyStack {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *3],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *3],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.662]}',
  grantPrincipal: [Circular *1],
  assumeRoleAction: 'sts:AssumeRole',
  attachedPolicies: AttachedPolicies { policies: [] },
  roleArn: 'arn:${Token[AWS.Partition.8]}:iam::112245769880:role',
  roleName: 'ServiceRole',
  policyFragment: PrincipalPolicyFragment {
    principalJson: { AWS: [Array] },
    conditions: {}
  },
  defaultPolicyName: undefined,
  principalAccount: '112245769880',
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnRole {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'Resource',
    scope: <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.660]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: Map(0) {},
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.669]}',
      roleArn: '${Token[TOKEN.667]}',
      _roleId: '${Token[TOKEN.666]}',
      policyFragment: [PrincipalPolicyFragment],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *3> EmptyStack {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *3],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *3],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.CustomResourceHandler.ServiceRole.Resource.LogicalID.664]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::IAM::Role',
  _cfnProperties: {
    assumeRolePolicyDocument: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    managedPolicyArns: [ '#{Token[TOKEN.663]}' ],
    policies: undefined,
    path: undefined,
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.660]}',
    maxSessionDuration: undefined,
    description: undefined
  },
  attrArn: '${Token[TOKEN.665]}',
  attrRoleId: '${Token[TOKEN.666]}',
  assumeRolePolicyDocument: PolicyDocument {
    statements: [ [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  description: undefined,
  managedPolicyArns: [ '#{Token[TOKEN.663]}' ],
  maxSessionDuration: undefined,
  path: undefined,
  permissionsBoundary: undefined,
  policies: undefined,
  roleName: '${Token[TOKEN.660]}',
  tags: TagManager {
    tags: Map(0) {},
    priorities: Map(0) {},
    externalTagPriority: 50,
    resourceTypeName: 'AWS::IAM::Role',
    tagFormatter: StandardFormatter {},
    tagPropertyName: 'tags',
    didHaveInitialTags: false,
    renderedTags: LazyAny {
      producer: [Object],
      cache: true,
      creationStack: [Array],
      options: {}
    }
  },
  tagsRaw: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
deleting
<ref *1> Asset {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: { Stage: [AssetStaging], AssetBucket: [Import] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'Code',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  isBundled: false,
  assetHash: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
  sourceHash: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
  assetPath: 'asset.190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
  isFile: false,
  isZipArchive: true,
  s3BucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
  s3ObjectKey: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e.zip',
  s3ObjectUrl: 's3://cdk-hnb659fds-assets-112245769880-us-east-1/190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e.zip',
  httpUrl: '${Token[TOKEN.670]}',
  s3Url: '${Token[TOKEN.670]}',
  bucket: <ref *2> Import {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: {},
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'AssetBucket',
      scope: [Circular *1]
    },
    stack: EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.671]}',
    bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
    bucketArn: 'arn:${Token[AWS.Partition.8]}:s3:::cdk-hnb659fds-assets-112245769880-us-east-1',
    bucketDomainName: 'cdk-hnb659fds-assets-112245769880-us-east-1.s3.amazonaws.com',
    bucketWebsiteUrl: 'http://cdk-hnb659fds-assets-112245769880-us-east-1.s3-website-us-east-1.amazonaws.com',
    bucketWebsiteDomainName: 'cdk-hnb659fds-assets-112245769880-us-east-1.s3-website-us-east-1.amazonaws.com',
    bucketRegionalDomainName: 'cdk-hnb659fds-assets-112245769880-us-east-1.s3.us-east-1.amazonaws.com',
    bucketDualStackDomainName: 'cdk-hnb659fds-assets-112245769880-us-east-1.s3.dualstack.us-east-1.amazonaws.com',
    bucketWebsiteNewUrlFormat: false,
    encryptionKey: undefined,
    isWebsite: false,
    policy: undefined,
    autoCreatePolicy: false,
    disallowPublicAccess: false,
    notificationsHandlerRole: undefined,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> AssetStaging {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'Stage',
    scope: Asset {
      node: [Node],
      isBundled: false,
      assetHash: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
      sourceHash: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
      assetPath: 'asset.190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
      isFile: false,
      isZipArchive: true,
      s3BucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      s3ObjectKey: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e.zip',
      s3ObjectUrl: 's3://cdk-hnb659fds-assets-112245769880-us-east-1/190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e.zip',
      httpUrl: '${Token[TOKEN.670]}',
      s3Url: '${Token[TOKEN.670]}',
      bucket: [Import],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  sourcePath: '/Users/frank/Sites/sst/packages/sst/dist/support/custom-resources',
  fingerprintOptions: {
    path: '/Users/frank/Sites/sst/packages/sst/dist/support/custom-resources/',
    deployTime: true,
    assetHash: "dev-playground-demoimport { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);\n" +
      'var __create = Object.create;\n' +
      'var __defProp = Object.defineProperty;\n' +
      'var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n' +
      'var __getOwnPropNames = Object.getOwnPropertyNames;\n' +
      'var __getProtoOf = Object.getPrototypeOf;\n' +
      'var __hasOwnProp = Object.prototype.hasOwnProperty;\n' +
      'var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {\n' +
      '  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]\n' +
      '}) : x)(function(x) {\n' +
      '  if (typeof require !== "undefined")\n' +
      '    return require.apply(this, arguments);\n' +
      `  throw Error('Dynamic require of "' + x + '" is not supported');\n` +
      '});\n' +
      'var __esm = (fn, res) => function __init() {\n' +
      '  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n' +
      '};\n' +
      'var __commonJS = (cb, mod) => function __require2() {\n' +
      '  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n' +
      '};\n' +
      'var __export = (target, all) => {\n' +
      '  for (var name in all)\n' +
      '    __defProp(target, name, { get: all[name], enumerable: true });\n' +
      '};\n' +
      'var __copyProps = (to, from, except, desc) => {\n' +
      '  if (from && typeof from === "object" || typeof from === "function") {\n' +
      '    for (let key of __getOwnPropNames(from))\n' +
      '      if (!__hasOwnProp.call(to, key) && key !== except)\n' +
      '        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n' +
      '  }\n' +
      '  return to;\n' +
      '};\n' +
      'var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n' +
      '  // If the importer is in node compatibility mode or this is not an ESM\n' +
      '  // file that has been converted to a CommonJS file using a Babel-\n' +
      '  // compatible transform (i.e. "__esModule" has not been set), then set\n' +
      '  // "default" to the CommonJS "module.exports" for node compatibility.\n' +
      '  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,\n' +
      '  mod\n' +
      '));\n' +
      'var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n' +
      '\n' +
      '// ../../node_modules/.pnpm/tslib@2.6.1/node_modules/tslib/tslib.es6.mjs\n' +
      'var tslib_es6_exports = {};\n' +
      '__export(tslib_es6_exports, {\n' +
      '  __addDisposableResource: () => __addDisposableResource,\n' +
      '  __assign: () => __assign,\n' +
      '  __asyncDelegator: () => __asyncDelegator,\n' +
      '  __asyncGenerator: () => __asyncGenerator,\n' +
      '  __asyncValues: () => __asyncValues,\n' +
      '  __await: () => __await,\n' +
      '  __awaiter: () => __awaiter,\n' +
      '  __classPrivateFieldGet: () => __classPrivateFieldGet,\n' +
      '  __classPrivateFieldIn: () => __classPrivateFieldIn,\n' +
      '  __classPrivateFieldSet: () => __classPrivateFieldSet,\n' +
      '  __createBinding: () => __createBinding,\n' +
      '  __decorate: () => __decorate,\n' +
      '  __disposeResources: () => __disposeResources,\n' +
      '  __esDecorate: () => __esDecorate,\n' +
      '  __exportStar: () => __exportStar,\n' +
      '  __extends: () => __extends,\n' +
      '  __generator: () => __generator,\n' +
      '  __importDefault: () => __importDefault,\n' +
      '  __importStar: () => __importStar,\n' +
      '  __makeTemplateObject: () => __makeTemplateObject,\n' +
      '  __metadata: () => __metadata,\n' +
      '  __param: () => __param,\n' +
      '  __propKey: () => __propKey,\n' +
      '  __read: () => __read,\n' +
      '  __rest: () => __rest,\n' +
      '  __runInitializers: () => __runInitializers,\n' +
      '  __setFunctionName: () => __setFunctionName,\n' +
      '  __spread: () => __spread,\n' +
      '  __spreadArray: () => __spreadArray,\n' +
      '  __spreadArrays: () => __spreadArrays,\n' +
      '  __values: () => __values,\n' +
      '  default: () => tslib_es6_default\n' +
      '});\n' +
      'function __extends(d, b) {\n' +
      '  if (typeof b !== "function" && b !== null)\n' +
      '    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n' +
      '  extendStatics(d, b);\n' +
      '  function __() {\n' +
      '    this.constructor = d;\n' +
      '  }\n' +
      '  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n' +
      '}\n' +
      'function __rest(s, e) {\n' +
      '  var t = {};\n' +
      '  for (var p in s)\n' +
      '    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n' +
      '      t[p] = s[p];\n' +
      '  if (s != null && typeof Object.getOwnPropertySymbols === "function")\n' +
      '    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n' +
      '      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n' +
      '        t[p[i]] = s[p[i]];\n' +
      '    }\n' +
      '  return t;\n' +
      '}\n' +
      'function __decorate(decorators, target, key, desc) {\n' +
      '  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n' +
      '  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")\n' +
      '    r = Reflect.decorate(decorators, target, key, desc);\n' +
      '  else\n' +
      '    for (var i = decorators.length - 1; i >= 0; i--)\n' +
      '      if (d = decorators[i])\n' +
      '        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n' +
      '  return c > 3 && r && Object.defineProperty(target, key, r), r;\n' +
      '}\n' +
      'function __param(paramIndex, decorator) {\n' +
      '  return function(target, key) {\n' +
      '    decorator(target, key, paramIndex);\n' +
      '  };\n' +
      '}\n' +
      'function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n' +
      '  function accept(f) {\n' +
      '    if (f !== void 0 && typeof f !== "function")\n' +
      '      throw new TypeError("Function expected");\n' +
      '    return f;\n' +
      '  }\n' +
      '  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";\n' +
      '  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;\n' +
      '  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n' +
      '  var _, done = false;\n' +
      '  for (var i = decorators.length - 1; i >= 0; i--) {\n' +
      '    var context = {};\n' +
      '    for (var p in contextIn)\n' +
      '      context[p] = p === "access" ? {} : contextIn[p];\n' +
      '    for (var p in contextIn.access)\n' +
      '      context.access[p] = contextIn.access[p];\n' +
      '    context.addInitializer = function(f) {\n' +
      '      if (done)\n' +
      '        throw new TypeError("Cannot add initializers after decoration has completed");\n' +
      '      extraInitializers.push(accept(f || null));\n' +
      '    };\n' +
      '    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n' +
      '    if (kind === "accessor") {\n' +
      '      if (result === void 0)\n' +
      '        continue;\n' +
      '      if (result === null || typeof result !== "object")\n' +
      '        throw new TypeError("Object expected");\n' +
      '      if (_ = accept(result.get))\n' +
      '        descriptor.get = _;\n' +
      '      if (_ = accept(result.set))\n' +
      '        descriptor.set = _;\n' +
      '      if (_ = accept(result.init))\n' +
      '        initializers.unshift(_);\n' +
      '    } else if (_ = accept(result)) {\n' +
      '      if (kind === "field")\n' +
      '        initializers.unshift(_);\n' +
      '      else\n' +
      '        descriptor[key] = _;\n' +
      '    }\n' +
      '  }\n' +
      '  if (target)\n' +
      '    Object.defineProperty(target, contextIn.name, descriptor);\n' +
      '  done = true;\n' +
      '}\n' +
      'function __runInitializers(thisArg, initializers, value) {\n' +
      '  var useValue = arguments.length > 2;\n' +
      '  for (var i = 0; i < initializers.length; i++) {\n' +
      '    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n' +
      '  }\n' +
      '  return useValue ? value : void 0;\n' +
      '}\n' +
      'function __propKey(x) {\n' +
      '  return typeof x === "symbol" ? x : "".concat(x);\n' +
      '}\n' +
      'function __setFunctionName(f, name, prefix) {\n' +
      '  if (typeof name === "symbol")\n' +
      '    name = name.description ? "[".concat(name.description, "]") : "";\n' +
      '  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });\n' +
      '}\n' +
      'function __metadata(metadataKey, metadataValue) {\n' +
      '  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")\n' +
      '    return Reflect.metadata(metadataKey, metadataValue);\n' +
      '}\n' +
      'function __awaiter(thisArg, _arguments, P, generator) {\n' +
      '  function adopt(value) {\n' +
      '    return value instanceof P ? value : new P(function(resolve) {\n' +
      '      resolve(value);\n' +
      '    });\n' +
      '  }\n' +
      '  return new (P || (P = Promise))(function(resolve, reject) {\n' +
      '    function fulfilled(value) {\n' +
      '      try {\n' +
      '        step(generator.next(value));\n' +
      '      } catch (e) {\n' +
      '        reject(e);\n' +
      '      }\n' +
      '    }\n' +
      '    function rejected(value) {\n' +
      '      try {\n' +
      '        step(generator["throw"](value));\n' +
      '      } catch (e) {\n' +
      '        reject(e);\n' +
      '      }\n' +
      '    }\n' +
      '    function step(result) {\n' +
      '      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n' +
      '    }\n' +
      '    step((generator = generator.apply(thisArg, _arguments || [])).next());\n' +
      '  });\n' +
      '}\n' +
      'function __generator(thisArg, body) {\n' +
      '  var _ = { label: 0, sent: function() {\n' +
      '    if (t[0] & 1)\n' +
      '      throw t[1];\n' +
      '    return t[1];\n' +
      '  }, trys: [], ops: [] }, f, y, t, g;\n' +
      '  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {\n' +
      '    return this;\n' +
      '  }), g;\n' +
      '  function verb(n) {\n' +
      '    return function(v) {\n' +
      '      return step([n, v]);\n' +
      '    };\n' +
      '  }\n' +
      '  function step(op) {\n' +
      '    if (f)\n' +
      '      throw new TypeError("Generator is already executing.");\n' +
      '    while (g && (g = 0, op[0] && (_ = 0)), _)\n' +
      '      try {\n' +
      '        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n' +
      '          return t;\n' +
      '        if (y = 0, t)\n' +
      '          op = [op[0] & 2, t.value];\n' +
      '        switch (op[0]) {\n' +
      '          case 0:\n' +
      '          case 1:\n' +
      '            t = op;\n' +
      '            break;\n' +
      '          case 4:\n' +
      '            _.label++;\n' +
      '            return { value: op[1], done: false };\n' +
      '          case 5:\n' +
      '            _.label++;\n' +
      '            y = op[1];\n' +
      '            op = [0];\n' +
      '            continue;\n' +
      '          case 7:\n' +
      '            op = _.ops.pop();\n' +
      '            _.trys.pop();\n' +
      '            continue;\n' +
      '          default:\n' +
      '            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n' +
      '              _ = 0;\n' +
      '              continue;\n' +
      '            }\n' +
      '            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n' +
      '              _.label = op[1];\n' +
      '              break;\n' +
      '            }\n' +
      '            if (op[0] === 6 && _.label < t[1]) {\n' +
      '              _.label = t[1];\n' +
      '              t = op;\n' +
      '              break;\n' +
      '            }\n' +
      '            if (t && _.label < t[2]) {\n' +
      '              _.label = t[2];\n' +
      '              _.ops.push(op);\n' +
      '     '... 8848178 more characters,
    sourcePath: '/Users/frank/Sites/sst/packages/sst/dist/support/custom-resources',
    follow: undefined,
    extraHash: undefined
  },
  sourceStats: Stats {
    dev: 16777231,
    mode: 16877,
    nlink: 3,
    uid: 501,
    gid: 20,
    rdev: 0,
    blksize: 4096,
    ino: 27794652,
    size: 96,
    blocks: 0,
    atimeMs: 1677089498450.2651,
    mtimeMs: 1677086589949.3555,
    ctimeMs: 1677086589949.3555,
    birthtimeMs: 1677086589949.3057,
    atime: 2023-02-22T18:11:38.450Z,
    mtime: 2023-02-22T17:23:09.949Z,
    ctime: 2023-02-22T17:23:09.949Z,
    birthtime: 2023-02-22T17:23:09.949Z
  },
  assetOutdir: '/Users/frank/Sites/sst-playground/.sst/dist',
  customSourceFingerprint: "dev-playground-demoimport { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);\n" +
    'var __create = Object.create;\n' +
    'var __defProp = Object.defineProperty;\n' +
    'var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n' +
    'var __getOwnPropNames = Object.getOwnPropertyNames;\n' +
    'var __getProtoOf = Object.getPrototypeOf;\n' +
    'var __hasOwnProp = Object.prototype.hasOwnProperty;\n' +
    'var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {\n' +
    '  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]\n' +
    '}) : x)(function(x) {\n' +
    '  if (typeof require !== "undefined")\n' +
    '    return require.apply(this, arguments);\n' +
    `  throw Error('Dynamic require of "' + x + '" is not supported');\n` +
    '});\n' +
    'var __esm = (fn, res) => function __init() {\n' +
    '  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n' +
    '};\n' +
    'var __commonJS = (cb, mod) => function __require2() {\n' +
    '  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n' +
    '};\n' +
    'var __export = (target, all) => {\n' +
    '  for (var name in all)\n' +
    '    __defProp(target, name, { get: all[name], enumerable: true });\n' +
    '};\n' +
    'var __copyProps = (to, from, except, desc) => {\n' +
    '  if (from && typeof from === "object" || typeof from === "function") {\n' +
    '    for (let key of __getOwnPropNames(from))\n' +
    '      if (!__hasOwnProp.call(to, key) && key !== except)\n' +
    '        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n' +
    '  }\n' +
    '  return to;\n' +
    '};\n' +
    'var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n' +
    '  // If the importer is in node compatibility mode or this is not an ESM\n' +
    '  // file that has been converted to a CommonJS file using a Babel-\n' +
    '  // compatible transform (i.e. "__esModule" has not been set), then set\n' +
    '  // "default" to the CommonJS "module.exports" for node compatibility.\n' +
    '  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,\n' +
    '  mod\n' +
    '));\n' +
    'var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n' +
    '\n' +
    '// ../../node_modules/.pnpm/tslib@2.6.1/node_modules/tslib/tslib.es6.mjs\n' +
    'var tslib_es6_exports = {};\n' +
    '__export(tslib_es6_exports, {\n' +
    '  __addDisposableResource: () => __addDisposableResource,\n' +
    '  __assign: () => __assign,\n' +
    '  __asyncDelegator: () => __asyncDelegator,\n' +
    '  __asyncGenerator: () => __asyncGenerator,\n' +
    '  __asyncValues: () => __asyncValues,\n' +
    '  __await: () => __await,\n' +
    '  __awaiter: () => __awaiter,\n' +
    '  __classPrivateFieldGet: () => __classPrivateFieldGet,\n' +
    '  __classPrivateFieldIn: () => __classPrivateFieldIn,\n' +
    '  __classPrivateFieldSet: () => __classPrivateFieldSet,\n' +
    '  __createBinding: () => __createBinding,\n' +
    '  __decorate: () => __decorate,\n' +
    '  __disposeResources: () => __disposeResources,\n' +
    '  __esDecorate: () => __esDecorate,\n' +
    '  __exportStar: () => __exportStar,\n' +
    '  __extends: () => __extends,\n' +
    '  __generator: () => __generator,\n' +
    '  __importDefault: () => __importDefault,\n' +
    '  __importStar: () => __importStar,\n' +
    '  __makeTemplateObject: () => __makeTemplateObject,\n' +
    '  __metadata: () => __metadata,\n' +
    '  __param: () => __param,\n' +
    '  __propKey: () => __propKey,\n' +
    '  __read: () => __read,\n' +
    '  __rest: () => __rest,\n' +
    '  __runInitializers: () => __runInitializers,\n' +
    '  __setFunctionName: () => __setFunctionName,\n' +
    '  __spread: () => __spread,\n' +
    '  __spreadArray: () => __spreadArray,\n' +
    '  __spreadArrays: () => __spreadArrays,\n' +
    '  __values: () => __values,\n' +
    '  default: () => tslib_es6_default\n' +
    '});\n' +
    'function __extends(d, b) {\n' +
    '  if (typeof b !== "function" && b !== null)\n' +
    '    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n' +
    '  extendStatics(d, b);\n' +
    '  function __() {\n' +
    '    this.constructor = d;\n' +
    '  }\n' +
    '  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n' +
    '}\n' +
    'function __rest(s, e) {\n' +
    '  var t = {};\n' +
    '  for (var p in s)\n' +
    '    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n' +
    '      t[p] = s[p];\n' +
    '  if (s != null && typeof Object.getOwnPropertySymbols === "function")\n' +
    '    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n' +
    '      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n' +
    '        t[p[i]] = s[p[i]];\n' +
    '    }\n' +
    '  return t;\n' +
    '}\n' +
    'function __decorate(decorators, target, key, desc) {\n' +
    '  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n' +
    '  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")\n' +
    '    r = Reflect.decorate(decorators, target, key, desc);\n' +
    '  else\n' +
    '    for (var i = decorators.length - 1; i >= 0; i--)\n' +
    '      if (d = decorators[i])\n' +
    '        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n' +
    '  return c > 3 && r && Object.defineProperty(target, key, r), r;\n' +
    '}\n' +
    'function __param(paramIndex, decorator) {\n' +
    '  return function(target, key) {\n' +
    '    decorator(target, key, paramIndex);\n' +
    '  };\n' +
    '}\n' +
    'function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n' +
    '  function accept(f) {\n' +
    '    if (f !== void 0 && typeof f !== "function")\n' +
    '      throw new TypeError("Function expected");\n' +
    '    return f;\n' +
    '  }\n' +
    '  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";\n' +
    '  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;\n' +
    '  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n' +
    '  var _, done = false;\n' +
    '  for (var i = decorators.length - 1; i >= 0; i--) {\n' +
    '    var context = {};\n' +
    '    for (var p in contextIn)\n' +
    '      context[p] = p === "access" ? {} : contextIn[p];\n' +
    '    for (var p in contextIn.access)\n' +
    '      context.access[p] = contextIn.access[p];\n' +
    '    context.addInitializer = function(f) {\n' +
    '      if (done)\n' +
    '        throw new TypeError("Cannot add initializers after decoration has completed");\n' +
    '      extraInitializers.push(accept(f || null));\n' +
    '    };\n' +
    '    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n' +
    '    if (kind === "accessor") {\n' +
    '      if (result === void 0)\n' +
    '        continue;\n' +
    '      if (result === null || typeof result !== "object")\n' +
    '        throw new TypeError("Object expected");\n' +
    '      if (_ = accept(result.get))\n' +
    '        descriptor.get = _;\n' +
    '      if (_ = accept(result.set))\n' +
    '        descriptor.set = _;\n' +
    '      if (_ = accept(result.init))\n' +
    '        initializers.unshift(_);\n' +
    '    } else if (_ = accept(result)) {\n' +
    '      if (kind === "field")\n' +
    '        initializers.unshift(_);\n' +
    '      else\n' +
    '        descriptor[key] = _;\n' +
    '    }\n' +
    '  }\n' +
    '  if (target)\n' +
    '    Object.defineProperty(target, contextIn.name, descriptor);\n' +
    '  done = true;\n' +
    '}\n' +
    'function __runInitializers(thisArg, initializers, value) {\n' +
    '  var useValue = arguments.length > 2;\n' +
    '  for (var i = 0; i < initializers.length; i++) {\n' +
    '    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n' +
    '  }\n' +
    '  return useValue ? value : void 0;\n' +
    '}\n' +
    'function __propKey(x) {\n' +
    '  return typeof x === "symbol" ? x : "".concat(x);\n' +
    '}\n' +
    'function __setFunctionName(f, name, prefix) {\n' +
    '  if (typeof name === "symbol")\n' +
    '    name = name.description ? "[".concat(name.description, "]") : "";\n' +
    '  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });\n' +
    '}\n' +
    'function __metadata(metadataKey, metadataValue) {\n' +
    '  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")\n' +
    '    return Reflect.metadata(metadataKey, metadataValue);\n' +
    '}\n' +
    'function __awaiter(thisArg, _arguments, P, generator) {\n' +
    '  function adopt(value) {\n' +
    '    return value instanceof P ? value : new P(function(resolve) {\n' +
    '      resolve(value);\n' +
    '    });\n' +
    '  }\n' +
    '  return new (P || (P = Promise))(function(resolve, reject) {\n' +
    '    function fulfilled(value) {\n' +
    '      try {\n' +
    '        step(generator.next(value));\n' +
    '      } catch (e) {\n' +
    '        reject(e);\n' +
    '      }\n' +
    '    }\n' +
    '    function rejected(value) {\n' +
    '      try {\n' +
    '        step(generator["throw"](value));\n' +
    '      } catch (e) {\n' +
    '        reject(e);\n' +
    '      }\n' +
    '    }\n' +
    '    function step(result) {\n' +
    '      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n' +
    '    }\n' +
    '    step((generator = generator.apply(thisArg, _arguments || [])).next());\n' +
    '  });\n' +
    '}\n' +
    'function __generator(thisArg, body) {\n' +
    '  var _ = { label: 0, sent: function() {\n' +
    '    if (t[0] & 1)\n' +
    '      throw t[1];\n' +
    '    return t[1];\n' +
    '  }, trys: [], ops: [] }, f, y, t, g;\n' +
    '  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {\n' +
    '    return this;\n' +
    '  }), g;\n' +
    '  function verb(n) {\n' +
    '    return function(v) {\n' +
    '      return step([n, v]);\n' +
    '    };\n' +
    '  }\n' +
    '  function step(op) {\n' +
    '    if (f)\n' +
    '      throw new TypeError("Generator is already executing.");\n' +
    '    while (g && (g = 0, op[0] && (_ = 0)), _)\n' +
    '      try {\n' +
    '        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n' +
    '          return t;\n' +
    '        if (y = 0, t)\n' +
    '          op = [op[0] & 2, t.value];\n' +
    '        switch (op[0]) {\n' +
    '          case 0:\n' +
    '          case 1:\n' +
    '            t = op;\n' +
    '            break;\n' +
    '          case 4:\n' +
    '            _.label++;\n' +
    '            return { value: op[1], done: false };\n' +
    '          case 5:\n' +
    '            _.label++;\n' +
    '            y = op[1];\n' +
    '            op = [0];\n' +
    '            continue;\n' +
    '          case 7:\n' +
    '            op = _.ops.pop();\n' +
    '            _.trys.pop();\n' +
    '            continue;\n' +
    '          default:\n' +
    '            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n' +
    '              _ = 0;\n' +
    '              continue;\n' +
    '            }\n' +
    '            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n' +
    '              _.label = op[1];\n' +
    '              break;\n' +
    '            }\n' +
    '            if (op[0] === 6 && _.label < t[1]) {\n' +
    '              _.label = t[1];\n' +
    '              t = op;\n' +
    '              break;\n' +
    '            }\n' +
    '            if (t && _.label < t[2]) {\n' +
    '              _.label = t[2];\n' +
    '              _.ops.push(op);\n' +
    '     '... 8848178 more characters,
  hashType: 'custom',
  cacheKey: '4734e3a467ad15190ba0ed14d861f6abc3637824185347db5cbc6b41bf602a2a',
  stagedPath: '/Users/frank/Sites/sst-playground/.sst/dist/asset.190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
  absoluteStagedPath: '/Users/frank/Sites/sst-playground/.sst/dist/asset.190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
  assetHash: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
  packaging: 'zip',
  isArchive: true,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Import {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [ [Object] ],
    id: 'AssetBucket',
    scope: Asset {
      node: [Node],
      isBundled: false,
      assetHash: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
      sourceHash: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
      assetPath: 'asset.190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e',
      isFile: false,
      isZipArchive: true,
      s3BucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      s3ObjectKey: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e.zip',
      s3ObjectUrl: 's3://cdk-hnb659fds-assets-112245769880-us-east-1/190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e.zip',
      httpUrl: '${Token[TOKEN.670]}',
      s3Url: '${Token[TOKEN.670]}',
      bucket: [Circular *1],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.671]}',
  bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
  bucketArn: 'arn:${Token[AWS.Partition.8]}:s3:::cdk-hnb659fds-assets-112245769880-us-east-1',
  bucketDomainName: 'cdk-hnb659fds-assets-112245769880-us-east-1.s3.amazonaws.com',
  bucketWebsiteUrl: 'http://cdk-hnb659fds-assets-112245769880-us-east-1.s3-website-us-east-1.amazonaws.com',
  bucketWebsiteDomainName: 'cdk-hnb659fds-assets-112245769880-us-east-1.s3-website-us-east-1.amazonaws.com',
  bucketRegionalDomainName: 'cdk-hnb659fds-assets-112245769880-us-east-1.s3.us-east-1.amazonaws.com',
  bucketDualStackDomainName: 'cdk-hnb659fds-assets-112245769880-us-east-1.s3.dualstack.us-east-1.amazonaws.com',
  bucketWebsiteNewUrlFormat: false,
  encryptionKey: undefined,
  isWebsite: false,
  policy: undefined,
  autoCreatePolicy: false,
  disallowPublicAccess: false,
  notificationsHandlerRole: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnFunction {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(1) { [Role] },
    _validations: [],
    id: 'Resource',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.CustomResourceHandler.Resource.LogicalID.673]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::Lambda::Function',
  _cfnProperties: {
    functionName: '${Token[TOKEN.659]}',
    description: undefined,
    code: {
      s3Bucket: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      s3Key: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e.zip',
      s3ObjectVersion: undefined,
      zipFile: undefined,
      imageUri: undefined
    },
    layers: [ '#{Token[TOKEN.672]}' ],
    handler: 'index.handler',
    timeout: 900,
    packageType: undefined,
    runtime: 'nodejs16.x',
    role: '${Token[TOKEN.667]}',
    environment: LazyAny {
      producer: [Object],
      cache: false,
      creationStack: [Array],
      options: {}
    },
    memorySize: 1024,
    ephemeralStorage: undefined,
    vpcConfig: undefined,
    deadLetterConfig: undefined,
    reservedConcurrentExecutions: undefined,
    imageConfig: undefined,
    kmsKeyArn: undefined,
    fileSystemConfigs: undefined,
    codeSigningConfigArn: undefined,
    architectures: undefined,
    runtimeManagementConfig: undefined,
    snapStart: undefined
  },
  attrArn: '${Token[TOKEN.674]}',
  attrSnapStartResponse: CfnReference {
    creationStack: [ 'stack traces disabled' ],
    value: { 'Fn::GetAtt': [Array] },
    typeHint: 'string',
    target: [Circular *1],
    displayName: 'SnapStartResponse',
    replacementTokens: Map(0) {},
    targetStack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  attrSnapStartResponseApplyOn: '${Token[TOKEN.675]}',
  attrSnapStartResponseOptimizationStatus: '${Token[TOKEN.676]}',
  architectures: undefined,
  code: {
    s3Bucket: 'cdk-hnb659fds-assets-112245769880-us-east-1',
    s3Key: '190b4fd64111ea285f39853217be5fd9eb64cbf877e440bed4f6e6131b74f36e.zip',
    s3ObjectVersion: undefined,
    zipFile: undefined,
    imageUri: undefined
  },
  codeSigningConfigArn: undefined,
  deadLetterConfig: undefined,
  description: undefined,
  environment: LazyAny {
    producer: { produce: [Function: produce] },
    cache: false,
    creationStack: [ 'Execute again with CDK_DEBUG=true to capture stack traces' ],
    options: {}
  },
  ephemeralStorage: undefined,
  fileSystemConfigs: undefined,
  functionName: '${Token[TOKEN.659]}',
  handler: 'index.handler',
  imageConfig: undefined,
  kmsKeyArn: undefined,
  layers: [ '#{Token[TOKEN.672]}' ],
  memorySize: 1024,
  packageType: undefined,
  reservedConcurrentExecutions: undefined,
  role: '${Token[TOKEN.667]}',
  runtime: 'nodejs16.x',
  runtimeManagementConfig: undefined,
  snapStart: undefined,
  tags: TagManager {
    tags: Map(0) {},
    priorities: Map(0) {},
    externalTagPriority: 50,
    resourceTypeName: 'AWS::Lambda::Function',
    tagFormatter: StandardFormatter {},
    tagPropertyName: 'tags',
    didHaveInitialTags: false,
    renderedTags: LazyAny {
      producer: [Object],
      cache: true,
      creationStack: [Array],
      options: {}
    }
  },
  tagsRaw: undefined,
  timeout: 900,
  tracingConfig: undefined,
  vpcConfig: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Secret {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'demoSTRIPE',
    scope: EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  id: 'demoSTRIPE',
  name: 'demoSTRIPE',
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Function {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {
      ServiceRole: [Role],
      Resource: [CfnFunction],
      FunctionUrl: [FunctionUrl],
      'invoke-function-url': [CfnPermission]
    },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'demoFunction',
    scope: EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    _addr: 'c84988c7b0c3aba3f9e2a602b13526b591af7906ab'
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.680]}',
  _warnIfCurrentVersionCalled: false,
  _invocationGrants: {},
  _functionUrlInvocationGrants: {},
  permissionsNode: Node {
    host: [Circular *1],
    _locked: false,
    _children: {
      ServiceRole: [Role],
      Resource: [CfnFunction],
      FunctionUrl: [FunctionUrl],
      'invoke-function-url': [CfnPermission]
    },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'demoFunction',
    scope: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    _addr: 'c84988c7b0c3aba3f9e2a602b13526b591af7906ab'
  },
  canCreatePermissions: true,
  _layers: [],
  environment: {
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: { value: '1', removeInEdge: true },
    SST_APP: { value: 'playground', removeInEdge: true },
    SST_STAGE: { value: 'dev', removeInEdge: true },
    SST_SSM_PREFIX: { value: '/sst/playground/dev/', removeInEdge: true },
    SST_Secret_value_demoSTRIPE: { value: '__FETCH_FROM_SSM__' }
  },
  hashMixins: [],
  role: <ref *3> Role {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'ServiceRole',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.681]}',
    grantPrincipal: [Circular *3],
    principalAccount: '112245769880',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [Array] },
    dependables: Map(2) {
      [PolicyStatement] => [DependencyGroup],
      [PolicyStatement] => [DependencyGroup]
    },
    _didSplit: false,
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.690]}',
    roleArn: '${Token[TOKEN.688]}',
    _roleId: '${Token[TOKEN.687]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    defaultPolicy: Policy {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.696]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.696]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.696]}',
      force: false,
      grantPrincipal: [PolicyGrantPrincipal],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  grantPrincipal: <ref *3> Role {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'ServiceRole',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.681]}',
    grantPrincipal: [Circular *3],
    principalAccount: '112245769880',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [Array] },
    dependables: Map(2) {
      [PolicyStatement] => [DependencyGroup],
      [PolicyStatement] => [DependencyGroup]
    },
    _didSplit: false,
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.690]}',
    roleArn: '${Token[TOKEN.688]}',
    _roleId: '${Token[TOKEN.687]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    defaultPolicy: Policy {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.696]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.696]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.696]}',
      force: false,
      grantPrincipal: [PolicyGrantPrincipal],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  _architecture: Architecture { name: 'x86_64', dockerPlatform: 'linux/amd64' },
  functionName: '${Token[TOKEN.703]}',
  functionArn: '${Token[TOKEN.704]}',
  runtime: Runtime {
    name: 'nodejs16.x',
    supportsInlineCode: true,
    family: 0,
    isVariable: false,
    bundlingDockerImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs16.x',
      _imageHash: undefined
    },
    bundlingImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs16.x',
      _imageHash: undefined
    },
    supportsCodeGuruProfiling: false,
    supportsSnapStart: false
  },
  timeout: Duration {
    amount: 10,
    unit: TimeUnit { label: 'seconds', isoLabel: 'S', inMillis: 1000 }
  },
  architecture: Architecture { name: 'x86_64', dockerPlatform: 'linux/amd64' },
  currentVersionOptions: undefined,
  id: 'demoFunction',
  _isLiveDevEnabled: false,
  _doNotAllowOthersToBind: undefined,
  functionUrl: <ref *4> FunctionUrl {
    node: Node {
      host: [Circular *4],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'FunctionUrl',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.705]}',
    url: '${Token[TOKEN.708]}',
    functionArn: '${Token[TOKEN.707]}',
    function: [Circular *1],
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  props: {
    runtime: 'nodejs18.x',
    nodejs: { format: 'esm' },
    handler: 'src/demo/lambda.main',
    bind: [ [Secret] ],
    url: true
  },
  allBindings: [
    Secret {
      node: [Node],
      id: 'demoSTRIPE',
      name: 'demoSTRIPE',
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  ],
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Role {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {
      ImportServiceRole: [ImportedRole],
      Resource: [CfnRole],
      DefaultPolicy: [Policy]
    },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [ [Object] ],
    id: 'ServiceRole',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.680]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: [Object],
      hashMixins: [],
      role: [Circular *1],
      grantPrincipal: [Circular *1],
      _architecture: [Architecture],
      functionName: '${Token[TOKEN.703]}',
      functionArn: '${Token[TOKEN.704]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      id: 'demoFunction',
      _isLiveDevEnabled: false,
      _doNotAllowOthersToBind: undefined,
      functionUrl: [FunctionUrl],
      props: [Object],
      allBindings: [Array],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.681]}',
  grantPrincipal: [Circular *1],
  principalAccount: '112245769880',
  assumeRoleAction: 'sts:AssumeRole',
  managedPolicies: [
    AwsManagedPolicy {
      managedPolicyArn: 'arn:${Token[AWS.Partition.8]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    }
  ],
  attachedPolicies: AttachedPolicies { policies: [ [Policy] ] },
  dependables: Map(2) {
    PolicyStatement {
      _action: [OrderedSet],
      _notAction: [OrderedSet],
      _principal: {},
      _notPrincipal: {},
      _resource: [OrderedSet],
      _notResource: [OrderedSet],
      _condition: {},
      _principals: [OrderedSet],
      _notPrincipals: [OrderedSet],
      _frozen: false,
      _sid: undefined,
      _effect: 'Allow'
    } => DependencyGroup {
      _deps: [],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    PolicyStatement {
      _action: [OrderedSet],
      _notAction: [OrderedSet],
      _principal: {},
      _notPrincipal: {},
      _resource: [OrderedSet],
      _notResource: [OrderedSet],
      _condition: {},
      _principals: [OrderedSet],
      _notPrincipals: [OrderedSet],
      _frozen: false,
      _sid: undefined,
      _effect: 'Allow'
    } => DependencyGroup {
      _deps: [],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  _didSplit: false,
  assumeRolePolicy: PolicyDocument {
    statements: [ [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  inlinePolicies: {},
  permissionsBoundary: undefined,
  roleName: '${Token[TOKEN.690]}',
  roleArn: '${Token[TOKEN.688]}',
  _roleId: '${Token[TOKEN.687]}',
  policyFragment: PrincipalPolicyFragment {
    principalJson: { AWS: [Array] },
    conditions: {}
  },
  defaultPolicy: <ref *3> Policy {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'DefaultPolicy',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: '${Token[TOKEN.696]}',
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.696]}',
    document: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    roles: [ [Circular *1] ],
    users: [],
    groups: [],
    referenceTaken: false,
    _policyName: '${Token[TOKEN.696]}',
    force: false,
    grantPrincipal: <ref *4> PolicyGrantPrincipal {
      _policy: [Circular *3],
      assumeRoleAction: 'sts:AssumeRole',
      grantPrincipal: [Circular *4],
      principalAccount: '112245769880'
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> ImportedRole {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'ImportServiceRole',
    scope: <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.681]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.690]}',
      roleArn: '${Token[TOKEN.688]}',
      _roleId: '${Token[TOKEN.687]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Policy],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *3> EmptyStack {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *3],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *3],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.683]}',
  grantPrincipal: [Circular *1],
  assumeRoleAction: 'sts:AssumeRole',
  attachedPolicies: AttachedPolicies { policies: [] },
  roleArn: 'arn:${Token[AWS.Partition.8]}:iam::112245769880:role',
  roleName: 'ServiceRole',
  policyFragment: PrincipalPolicyFragment {
    principalJson: { AWS: [Array] },
    conditions: {}
  },
  defaultPolicyName: undefined,
  principalAccount: '112245769880',
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnRole {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'Resource',
    scope: <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.681]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.690]}',
      roleArn: '${Token[TOKEN.688]}',
      _roleId: '${Token[TOKEN.687]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Policy],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *3> EmptyStack {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *3],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *3],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.demoFunction.ServiceRole.Resource.LogicalID.685]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::IAM::Role',
  _cfnProperties: {
    assumeRolePolicyDocument: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    managedPolicyArns: [ '#{Token[TOKEN.684]}' ],
    policies: undefined,
    path: undefined,
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.681]}',
    maxSessionDuration: undefined,
    description: undefined
  },
  attrArn: '${Token[TOKEN.686]}',
  attrRoleId: '${Token[TOKEN.687]}',
  assumeRolePolicyDocument: PolicyDocument {
    statements: [ [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  description: undefined,
  managedPolicyArns: [ '#{Token[TOKEN.684]}' ],
  maxSessionDuration: undefined,
  path: undefined,
  permissionsBoundary: undefined,
  policies: undefined,
  roleName: '${Token[TOKEN.681]}',
  tags: TagManager {
    tags: Map(0) {},
    priorities: Map(0) {},
    externalTagPriority: 50,
    resourceTypeName: 'AWS::IAM::Role',
    tagFormatter: StandardFormatter {},
    tagPropertyName: 'tags',
    didHaveInitialTags: false,
    renderedTags: LazyAny {
      producer: [Object],
      cache: true,
      creationStack: [Array],
      options: {}
    }
  },
  tagsRaw: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
deleting
<ref *1> Policy {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: { Resource: [CfnPolicyConditional] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [ [Object] ],
    id: 'DefaultPolicy',
    scope: <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.681]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.690]}',
      roleArn: '${Token[TOKEN.688]}',
      _roleId: '${Token[TOKEN.687]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Circular *1],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *3> EmptyStack {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *3],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *3],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: '${Token[TOKEN.696]}',
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.696]}',
  document: PolicyDocument {
    statements: [ [PolicyStatement], [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  roles: [
    <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.681]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.690]}',
      roleArn: '${Token[TOKEN.688]}',
      _roleId: '${Token[TOKEN.687]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Circular *1],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  ],
  users: [],
  groups: [],
  referenceTaken: false,
  _policyName: '${Token[TOKEN.696]}',
  force: false,
  grantPrincipal: <ref *4> PolicyGrantPrincipal {
    _policy: [Circular *1],
    assumeRoleAction: 'sts:AssumeRole',
    grantPrincipal: [Circular *4],
    principalAccount: '112245769880'
  },
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnPolicyConditional {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'Resource',
    scope: Policy {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.696]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.696]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.696]}',
      force: false,
      grantPrincipal: [PolicyGrantPrincipal],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.demoFunction.ServiceRole.DefaultPolicy.Resource.LogicalID.700]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::IAM::Policy',
  _cfnProperties: {
    policyDocument: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    policyName: '${Token[TOKEN.696]}',
    roles: [ '#{Token[TOKEN.697]}' ],
    users: [ '#{Token[TOKEN.698]}' ],
    groups: [ '#{Token[TOKEN.699]}' ]
  },
  attrId: '${Token[TOKEN.701]}',
  groups: [ '#{Token[TOKEN.699]}' ],
  policyDocument: PolicyDocument {
    statements: [ [PolicyStatement], [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  policyName: '${Token[TOKEN.696]}',
  roles: [ '#{Token[TOKEN.697]}' ],
  users: [ '#{Token[TOKEN.698]}' ],
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnFunction {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(1) { [Role] },
    _validations: [],
    id: 'Resource',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.680]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: [Object],
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: [Architecture],
      functionName: '${Token[TOKEN.703]}',
      functionArn: '${Token[TOKEN.704]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      id: 'demoFunction',
      _isLiveDevEnabled: false,
      _doNotAllowOthersToBind: undefined,
      functionUrl: [FunctionUrl],
      props: [Object],
      allBindings: [Array],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.demoFunction.Resource.LogicalID.692]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::Lambda::Function',
  _cfnProperties: {
    functionName: '${Token[TOKEN.680]}',
    description: undefined,
    code: {
      s3Bucket: undefined,
      s3Key: undefined,
      s3ObjectVersion: undefined,
      zipFile: 'export function placeholder() {}',
      imageUri: undefined
    },
    layers: [ '#{Token[TOKEN.691]}' ],
    handler: 'index.placeholder',
    timeout: 10,
    packageType: undefined,
    runtime: 'nodejs16.x',
    role: '${Token[TOKEN.688]}',
    environment: LazyAny {
      producer: [Object],
      cache: false,
      creationStack: [Array],
      options: {}
    },
    memorySize: 1024,
    ephemeralStorage: { size: 512 },
    vpcConfig: undefined,
    deadLetterConfig: undefined,
    reservedConcurrentExecutions: undefined,
    imageConfig: undefined,
    kmsKeyArn: undefined,
    fileSystemConfigs: undefined,
    codeSigningConfigArn: undefined,
    architectures: [ 'x86_64' ],
    runtimeManagementConfig: undefined,
    snapStart: undefined
  },
  attrArn: '${Token[TOKEN.693]}',
  attrSnapStartResponse: CfnReference {
    creationStack: [ 'stack traces disabled' ],
    value: { 'Fn::GetAtt': [Array] },
    typeHint: 'string',
    target: [Circular *1],
    displayName: 'SnapStartResponse',
    replacementTokens: Map(0) {},
    targetStack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  attrSnapStartResponseApplyOn: '${Token[TOKEN.694]}',
  attrSnapStartResponseOptimizationStatus: '${Token[TOKEN.695]}',
  architectures: [ 'x86_64' ],
  code: {
    s3Bucket: undefined,
    s3Key: undefined,
    s3ObjectVersion: undefined,
    zipFile: 'export function placeholder() {}',
    imageUri: undefined
  },
  codeSigningConfigArn: undefined,
  deadLetterConfig: undefined,
  description: undefined,
  environment: LazyAny {
    producer: { produce: [Function: produce] },
    cache: false,
    creationStack: [ 'Execute again with CDK_DEBUG=true to capture stack traces' ],
    options: {}
  },
  ephemeralStorage: { size: 512 },
  fileSystemConfigs: undefined,
  functionName: '${Token[TOKEN.680]}',
  handler: 'index.placeholder',
  imageConfig: undefined,
  kmsKeyArn: undefined,
  layers: [ '#{Token[TOKEN.691]}' ],
  memorySize: 1024,
  packageType: undefined,
  reservedConcurrentExecutions: undefined,
  role: '${Token[TOKEN.688]}',
  runtime: 'nodejs16.x',
  runtimeManagementConfig: undefined,
  snapStart: undefined,
  tags: TagManager {
    tags: Map(0) {},
    priorities: Map(0) {},
    externalTagPriority: 50,
    resourceTypeName: 'AWS::Lambda::Function',
    tagFormatter: StandardFormatter {},
    tagPropertyName: 'tags',
    didHaveInitialTags: false,
    renderedTags: LazyAny {
      producer: [Object],
      cache: true,
      creationStack: [Array],
      options: {}
    }
  },
  tagsRaw: undefined,
  timeout: 10,
  tracingConfig: { mode: 'Active' },
  vpcConfig: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> FunctionUrl {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: { Resource: [CfnUrl] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'FunctionUrl',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.680]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: [Object],
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: [Architecture],
      functionName: '${Token[TOKEN.703]}',
      functionArn: '${Token[TOKEN.704]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      id: 'demoFunction',
      _isLiveDevEnabled: false,
      _doNotAllowOthersToBind: undefined,
      functionUrl: [Circular *1],
      props: [Object],
      allBindings: [Array],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.705]}',
  url: '${Token[TOKEN.708]}',
  functionArn: '${Token[TOKEN.707]}',
  function: <ref *3> Function {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'demoFunction',
      scope: [EmptyStack],
      _addr: 'c84988c7b0c3aba3f9e2a602b13526b591af7906ab'
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.680]}',
    _warnIfCurrentVersionCalled: false,
    _invocationGrants: {},
    _functionUrlInvocationGrants: {},
    permissionsNode: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'demoFunction',
      scope: [EmptyStack],
      _addr: 'c84988c7b0c3aba3f9e2a602b13526b591af7906ab'
    },
    canCreatePermissions: true,
    _layers: [],
    environment: {
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: [Object],
      SST_APP: [Object],
      SST_STAGE: [Object],
      SST_SSM_PREFIX: [Object],
      SST_Secret_value_demoSTRIPE: [Object]
    },
    hashMixins: [],
    role: <ref *4> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.681]}',
      grantPrincipal: [Circular *4],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.690]}',
      roleArn: '${Token[TOKEN.688]}',
      _roleId: '${Token[TOKEN.687]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Policy],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    grantPrincipal: <ref *4> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.681]}',
      grantPrincipal: [Circular *4],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.690]}',
      roleArn: '${Token[TOKEN.688]}',
      _roleId: '${Token[TOKEN.687]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Policy],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    _architecture: Architecture { name: 'x86_64', dockerPlatform: 'linux/amd64' },
    functionName: '${Token[TOKEN.703]}',
    functionArn: '${Token[TOKEN.704]}',
    runtime: Runtime {
      name: 'nodejs16.x',
      supportsInlineCode: true,
      family: 0,
      isVariable: false,
      bundlingDockerImage: [DockerImage],
      bundlingImage: [DockerImage],
      supportsCodeGuruProfiling: false,
      supportsSnapStart: false
    },
    timeout: Duration { amount: 10, unit: [TimeUnit] },
    architecture: Architecture { name: 'x86_64', dockerPlatform: 'linux/amd64' },
    currentVersionOptions: undefined,
    id: 'demoFunction',
    _isLiveDevEnabled: false,
    _doNotAllowOthersToBind: undefined,
    functionUrl: [Circular *1],
    props: {
      runtime: 'nodejs18.x',
      nodejs: [Object],
      handler: 'src/demo/lambda.main',
      bind: [Array],
      url: true
    },
    allBindings: [ [Secret] ],
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnUrl {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'Resource',
    scope: FunctionUrl {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.705]}',
      url: '${Token[TOKEN.708]}',
      functionArn: '${Token[TOKEN.707]}',
      function: [Function],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.demoFunction.FunctionUrl.Resource.LogicalID.706]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::Lambda::Url',
  _cfnProperties: {
    authType: 'NONE',
    cors: {
      allowCredentials: undefined,
      allowHeaders: [Array],
      allowMethods: [Array],
      allowOrigins: [Array],
      exposeHeaders: undefined,
      maxAge: undefined
    },
    invokeMode: undefined,
    targetFunctionArn: '${Token[TOKEN.704]}',
    qualifier: undefined
  },
  attrFunctionArn: '${Token[TOKEN.707]}',
  attrFunctionUrl: '${Token[TOKEN.708]}',
  authType: 'NONE',
  cors: {
    allowCredentials: undefined,
    allowHeaders: [ '*' ],
    allowMethods: [ '*' ],
    allowOrigins: [ '*' ],
    exposeHeaders: undefined,
    maxAge: undefined
  },
  invokeMode: undefined,
  qualifier: undefined,
  targetFunctionArn: '${Token[TOKEN.704]}',
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnPermission {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'invoke-function-url',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.680]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: [Object],
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: [Architecture],
      functionName: '${Token[TOKEN.703]}',
      functionArn: '${Token[TOKEN.704]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      id: 'demoFunction',
      _isLiveDevEnabled: false,
      _doNotAllowOthersToBind: undefined,
      functionUrl: [FunctionUrl],
      props: [Object],
      allBindings: [Array],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.demoFunction.invoke-function-url.LogicalID.709]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::Lambda::Permission',
  _cfnProperties: {
    action: 'lambda:InvokeFunctionUrl',
    principal: '*',
    functionName: '${Token[TOKEN.704]}',
    eventSourceToken: undefined,
    sourceAccount: undefined,
    sourceArn: undefined,
    principalOrgId: undefined,
    functionUrlAuthType: 'NONE'
  },
  attrId: '${Token[TOKEN.710]}',
  action: 'lambda:InvokeFunctionUrl',
  eventSourceToken: undefined,
  functionName: '${Token[TOKEN.704]}',
  functionUrlAuthType: 'NONE',
  principal: '*',
  principalOrgId: undefined,
  sourceAccount: undefined,
  sourceArn: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Secret {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'demoSTRIPE2',
    scope: EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  id: 'demoSTRIPE2',
  name: 'demoSTRIPE2',
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Function {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: { ServiceRole: [Role], Resource: [CfnFunction] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'demoFunction2',
    scope: EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    _addr: 'c8be958a557b3c1f959590d11c0d4c4c85beacfe44'
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.711]}',
  _warnIfCurrentVersionCalled: false,
  _invocationGrants: {},
  _functionUrlInvocationGrants: {},
  permissionsNode: Node {
    host: [Circular *1],
    _locked: false,
    _children: { ServiceRole: [Role], Resource: [CfnFunction] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'demoFunction2',
    scope: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    _addr: 'c8be958a557b3c1f959590d11c0d4c4c85beacfe44'
  },
  canCreatePermissions: true,
  _layers: [],
  environment: {
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: { value: '1', removeInEdge: true },
    SST_APP: { value: 'playground', removeInEdge: true },
    SST_STAGE: { value: 'dev', removeInEdge: true },
    SST_SSM_PREFIX: { value: '/sst/playground/dev/', removeInEdge: true },
    SST_Function_functionName_demoFunction: { value: '${Token[TOKEN.703]}' },
    SST_Secret_value_demoSTRIPE2: { value: '__FETCH_FROM_SSM__' }
  },
  hashMixins: [],
  role: <ref *3> Role {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'ServiceRole',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.712]}',
    grantPrincipal: [Circular *3],
    principalAccount: '112245769880',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [Array] },
    dependables: Map(3) {
      [PolicyStatement] => [DependencyGroup],
      [PolicyStatement] => [DependencyGroup],
      [PolicyStatement] => [DependencyGroup]
    },
    _didSplit: false,
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.721]}',
    roleArn: '${Token[TOKEN.719]}',
    _roleId: '${Token[TOKEN.718]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    defaultPolicy: Policy {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.727]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.727]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.727]}',
      force: false,
      grantPrincipal: [PolicyGrantPrincipal],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  grantPrincipal: <ref *3> Role {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'ServiceRole',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: undefined,
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.712]}',
    grantPrincipal: [Circular *3],
    principalAccount: '112245769880',
    assumeRoleAction: 'sts:AssumeRole',
    managedPolicies: [ [AwsManagedPolicy] ],
    attachedPolicies: AttachedPolicies { policies: [Array] },
    dependables: Map(3) {
      [PolicyStatement] => [DependencyGroup],
      [PolicyStatement] => [DependencyGroup],
      [PolicyStatement] => [DependencyGroup]
    },
    _didSplit: false,
    assumeRolePolicy: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    inlinePolicies: {},
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.721]}',
    roleArn: '${Token[TOKEN.719]}',
    _roleId: '${Token[TOKEN.718]}',
    policyFragment: PrincipalPolicyFragment { principalJson: [Object], conditions: {} },
    defaultPolicy: Policy {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.727]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.727]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.727]}',
      force: false,
      grantPrincipal: [PolicyGrantPrincipal],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  _architecture: Architecture { name: 'x86_64', dockerPlatform: 'linux/amd64' },
  functionName: '${Token[TOKEN.734]}',
  functionArn: '${Token[TOKEN.735]}',
  runtime: Runtime {
    name: 'nodejs16.x',
    supportsInlineCode: true,
    family: 0,
    isVariable: false,
    bundlingDockerImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs16.x',
      _imageHash: undefined
    },
    bundlingImage: DockerImage {
      image: 'public.ecr.aws/sam/build-nodejs16.x',
      _imageHash: undefined
    },
    supportsCodeGuruProfiling: false,
    supportsSnapStart: false
  },
  timeout: Duration {
    amount: 10,
    unit: TimeUnit { label: 'seconds', isoLabel: 'S', inMillis: 1000 }
  },
  architecture: Architecture { name: 'x86_64', dockerPlatform: 'linux/amd64' },
  currentVersionOptions: undefined,
  id: 'demoFunction2',
  _isLiveDevEnabled: false,
  _doNotAllowOthersToBind: undefined,
  functionUrl: undefined,
  props: {
    runtime: 'nodejs16.x',
    nodejs: { format: 'esm' },
    handler: 'src/demo/lambda.main',
    bind: [ [Function], [Secret] ]
  },
  allBindings: [
    Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.680]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: [Object],
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: [Architecture],
      functionName: '${Token[TOKEN.703]}',
      functionArn: '${Token[TOKEN.704]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      id: 'demoFunction',
      _isLiveDevEnabled: false,
      _doNotAllowOthersToBind: undefined,
      functionUrl: [FunctionUrl],
      props: [Object],
      allBindings: [Array],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    Secret {
      node: [Node],
      id: 'demoSTRIPE2',
      name: 'demoSTRIPE2',
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  ],
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> Role {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {
      ImportServiceRole: [ImportedRole],
      Resource: [CfnRole],
      DefaultPolicy: [Policy]
    },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [ [Object] ],
    id: 'ServiceRole',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.711]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: [Object],
      hashMixins: [],
      role: [Circular *1],
      grantPrincipal: [Circular *1],
      _architecture: [Architecture],
      functionName: '${Token[TOKEN.734]}',
      functionArn: '${Token[TOKEN.735]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      id: 'demoFunction2',
      _isLiveDevEnabled: false,
      _doNotAllowOthersToBind: undefined,
      functionUrl: undefined,
      props: [Object],
      allBindings: [Array],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.712]}',
  grantPrincipal: [Circular *1],
  principalAccount: '112245769880',
  assumeRoleAction: 'sts:AssumeRole',
  managedPolicies: [
    AwsManagedPolicy {
      managedPolicyArn: 'arn:${Token[AWS.Partition.8]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    }
  ],
  attachedPolicies: AttachedPolicies { policies: [ [Policy] ] },
  dependables: Map(3) {
    PolicyStatement {
      _action: [OrderedSet],
      _notAction: [OrderedSet],
      _principal: {},
      _notPrincipal: {},
      _resource: [OrderedSet],
      _notResource: [OrderedSet],
      _condition: {},
      _principals: [OrderedSet],
      _notPrincipals: [OrderedSet],
      _frozen: false,
      _sid: undefined,
      _effect: 'Allow'
    } => DependencyGroup {
      _deps: [],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    PolicyStatement {
      _action: [OrderedSet],
      _notAction: [OrderedSet],
      _principal: {},
      _notPrincipal: {},
      _resource: [OrderedSet],
      _notResource: [OrderedSet],
      _condition: {},
      _principals: [OrderedSet],
      _notPrincipals: [OrderedSet],
      _frozen: false,
      _sid: undefined,
      _effect: 'Allow'
    } => DependencyGroup {
      _deps: [],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    PolicyStatement {
      _action: [OrderedSet],
      _notAction: [OrderedSet],
      _principal: {},
      _notPrincipal: {},
      _resource: [OrderedSet],
      _notResource: [OrderedSet],
      _condition: {},
      _principals: [OrderedSet],
      _notPrincipals: [OrderedSet],
      _frozen: false,
      _sid: undefined,
      _effect: 'Allow'
    } => DependencyGroup {
      _deps: [],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  _didSplit: false,
  assumeRolePolicy: PolicyDocument {
    statements: [ [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  inlinePolicies: {},
  permissionsBoundary: undefined,
  roleName: '${Token[TOKEN.721]}',
  roleArn: '${Token[TOKEN.719]}',
  _roleId: '${Token[TOKEN.718]}',
  policyFragment: PrincipalPolicyFragment {
    principalJson: { AWS: [Array] },
    conditions: {}
  },
  defaultPolicy: <ref *3> Policy {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [Array],
      id: 'DefaultPolicy',
      scope: [Circular *1]
    },
    stack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    env: { account: '112245769880', region: 'us-east-1' },
    _physicalName: '${Token[TOKEN.727]}',
    _allowCrossEnvironment: false,
    physicalName: '${Token[TOKEN.727]}',
    document: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    roles: [ [Circular *1] ],
    users: [],
    groups: [],
    referenceTaken: false,
    _policyName: '${Token[TOKEN.727]}',
    force: false,
    grantPrincipal: <ref *4> PolicyGrantPrincipal {
      _policy: [Circular *3],
      assumeRoleAction: 'sts:AssumeRole',
      grantPrincipal: [Circular *4],
      principalAccount: '112245769880'
    },
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> ImportedRole {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'ImportServiceRole',
    scope: <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.712]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.721]}',
      roleArn: '${Token[TOKEN.719]}',
      _roleId: '${Token[TOKEN.718]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Policy],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *3> EmptyStack {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *3],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *3],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: undefined,
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.714]}',
  grantPrincipal: [Circular *1],
  assumeRoleAction: 'sts:AssumeRole',
  attachedPolicies: AttachedPolicies { policies: [] },
  roleArn: 'arn:${Token[AWS.Partition.8]}:iam::112245769880:role',
  roleName: 'ServiceRole',
  policyFragment: PrincipalPolicyFragment {
    principalJson: { AWS: [Array] },
    conditions: {}
  },
  defaultPolicyName: undefined,
  principalAccount: '112245769880',
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnRole {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'Resource',
    scope: <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.712]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.721]}',
      roleArn: '${Token[TOKEN.719]}',
      _roleId: '${Token[TOKEN.718]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Policy],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *3> EmptyStack {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *3],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *3],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.demoFunction2.ServiceRole.Resource.LogicalID.716]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::IAM::Role',
  _cfnProperties: {
    assumeRolePolicyDocument: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    managedPolicyArns: [ '#{Token[TOKEN.715]}' ],
    policies: undefined,
    path: undefined,
    permissionsBoundary: undefined,
    roleName: '${Token[TOKEN.712]}',
    maxSessionDuration: undefined,
    description: undefined
  },
  attrArn: '${Token[TOKEN.717]}',
  attrRoleId: '${Token[TOKEN.718]}',
  assumeRolePolicyDocument: PolicyDocument {
    statements: [ [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  description: undefined,
  managedPolicyArns: [ '#{Token[TOKEN.715]}' ],
  maxSessionDuration: undefined,
  path: undefined,
  permissionsBoundary: undefined,
  policies: undefined,
  roleName: '${Token[TOKEN.712]}',
  tags: TagManager {
    tags: Map(0) {},
    priorities: Map(0) {},
    externalTagPriority: 50,
    resourceTypeName: 'AWS::IAM::Role',
    tagFormatter: StandardFormatter {},
    tagPropertyName: 'tags',
    didHaveInitialTags: false,
    renderedTags: LazyAny {
      producer: [Object],
      cache: true,
      creationStack: [Array],
      options: {}
    }
  },
  tagsRaw: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
deleting
<ref *1> Policy {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: { Resource: [CfnPolicyConditional] },
    _context: {},
    _metadata: [],
    _dependencies: Set(0) {},
    _validations: [ [Object] ],
    id: 'DefaultPolicy',
    scope: <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.712]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.721]}',
      roleArn: '${Token[TOKEN.719]}',
      _roleId: '${Token[TOKEN.718]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Circular *1],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *3> EmptyStack {
    node: Node {
      host: [Circular *3],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *3],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *3],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  env: { account: '112245769880', region: 'us-east-1' },
  _physicalName: '${Token[TOKEN.727]}',
  _allowCrossEnvironment: false,
  physicalName: '${Token[TOKEN.727]}',
  document: PolicyDocument {
    statements: [ [PolicyStatement], [PolicyStatement], [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  roles: [
    <ref *2> Role {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.712]}',
      grantPrincipal: [Circular *2],
      principalAccount: '112245769880',
      assumeRoleAction: 'sts:AssumeRole',
      managedPolicies: [Array],
      attachedPolicies: [AttachedPolicies],
      dependables: [Map],
      _didSplit: false,
      assumeRolePolicy: [PolicyDocument],
      inlinePolicies: {},
      permissionsBoundary: undefined,
      roleName: '${Token[TOKEN.721]}',
      roleArn: '${Token[TOKEN.719]}',
      _roleId: '${Token[TOKEN.718]}',
      policyFragment: [PrincipalPolicyFragment],
      defaultPolicy: [Circular *1],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  ],
  users: [],
  groups: [],
  referenceTaken: false,
  _policyName: '${Token[TOKEN.727]}',
  force: false,
  grantPrincipal: <ref *4> PolicyGrantPrincipal {
    _policy: [Circular *1],
    assumeRoleAction: 'sts:AssumeRole',
    grantPrincipal: [Circular *4],
    principalAccount: '112245769880'
  },
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnPolicyConditional {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [],
    id: 'Resource',
    scope: Policy {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: '${Token[TOKEN.727]}',
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.727]}',
      document: [PolicyDocument],
      roles: [Array],
      users: [],
      groups: [],
      referenceTaken: false,
      _policyName: '${Token[TOKEN.727]}',
      force: false,
      grantPrincipal: [PolicyGrantPrincipal],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.demoFunction2.ServiceRole.DefaultPolicy.Resource.LogicalID.731]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::IAM::Policy',
  _cfnProperties: {
    policyDocument: PolicyDocument {
      statements: [Array],
      creationStack: [Array],
      autoAssignSids: false,
      minimize: undefined
    },
    policyName: '${Token[TOKEN.727]}',
    roles: [ '#{Token[TOKEN.728]}' ],
    users: [ '#{Token[TOKEN.729]}' ],
    groups: [ '#{Token[TOKEN.730]}' ]
  },
  attrId: '${Token[TOKEN.732]}',
  groups: [ '#{Token[TOKEN.730]}' ],
  policyDocument: PolicyDocument {
    statements: [ [PolicyStatement], [PolicyStatement], [PolicyStatement] ],
    creationStack: [ 'stack traces disabled' ],
    autoAssignSids: false,
    minimize: undefined
  },
  policyName: '${Token[TOKEN.727]}',
  roles: [ '#{Token[TOKEN.728]}' ],
  users: [ '#{Token[TOKEN.729]}' ],
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnFunction {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(1) { [Role] },
    _validations: [],
    id: 'Resource',
    scope: Function {
      node: [Node],
      stack: [EmptyStack],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.711]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: [Object],
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: [Architecture],
      functionName: '${Token[TOKEN.734]}',
      functionArn: '${Token[TOKEN.735]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      id: 'demoFunction2',
      _isLiveDevEnabled: false,
      _doNotAllowOthersToBind: undefined,
      functionUrl: undefined,
      props: [Object],
      allBindings: [Array],
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.demoFunction2.Resource.LogicalID.723]}',
  cfnOptions: {},
  rawOverrides: {},
  dependsOn: Set(0) {},
  cfnResourceType: 'AWS::Lambda::Function',
  _cfnProperties: {
    functionName: '${Token[TOKEN.711]}',
    description: undefined,
    code: {
      s3Bucket: undefined,
      s3Key: undefined,
      s3ObjectVersion: undefined,
      zipFile: 'export function placeholder() {}',
      imageUri: undefined
    },
    layers: [ '#{Token[TOKEN.722]}' ],
    handler: 'index.placeholder',
    timeout: 10,
    packageType: undefined,
    runtime: 'nodejs16.x',
    role: '${Token[TOKEN.719]}',
    environment: LazyAny {
      producer: [Object],
      cache: false,
      creationStack: [Array],
      options: {}
    },
    memorySize: 1024,
    ephemeralStorage: { size: 512 },
    vpcConfig: undefined,
    deadLetterConfig: undefined,
    reservedConcurrentExecutions: undefined,
    imageConfig: undefined,
    kmsKeyArn: undefined,
    fileSystemConfigs: undefined,
    codeSigningConfigArn: undefined,
    architectures: [ 'x86_64' ],
    runtimeManagementConfig: undefined,
    snapStart: undefined
  },
  attrArn: '${Token[TOKEN.724]}',
  attrSnapStartResponse: CfnReference {
    creationStack: [ 'stack traces disabled' ],
    value: { 'Fn::GetAtt': [Array] },
    typeHint: 'string',
    target: [Circular *1],
    displayName: 'SnapStartResponse',
    replacementTokens: Map(0) {},
    targetStack: <ref *2> EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  attrSnapStartResponseApplyOn: '${Token[TOKEN.725]}',
  attrSnapStartResponseOptimizationStatus: '${Token[TOKEN.726]}',
  architectures: [ 'x86_64' ],
  code: {
    s3Bucket: undefined,
    s3Key: undefined,
    s3ObjectVersion: undefined,
    zipFile: 'export function placeholder() {}',
    imageUri: undefined
  },
  codeSigningConfigArn: undefined,
  deadLetterConfig: undefined,
  description: undefined,
  environment: LazyAny {
    producer: { produce: [Function: produce] },
    cache: false,
    creationStack: [ 'Execute again with CDK_DEBUG=true to capture stack traces' ],
    options: {}
  },
  ephemeralStorage: { size: 512 },
  fileSystemConfigs: undefined,
  functionName: '${Token[TOKEN.711]}',
  handler: 'index.placeholder',
  imageConfig: undefined,
  kmsKeyArn: undefined,
  layers: [ '#{Token[TOKEN.722]}' ],
  memorySize: 1024,
  packageType: undefined,
  reservedConcurrentExecutions: undefined,
  role: '${Token[TOKEN.719]}',
  runtime: 'nodejs16.x',
  runtimeManagementConfig: undefined,
  snapStart: undefined,
  tags: TagManager {
    tags: Map(0) {},
    priorities: Map(0) {},
    externalTagPriority: 50,
    resourceTypeName: 'AWS::Lambda::Function',
    tagFormatter: StandardFormatter {},
    tagPropertyName: 'tags',
    didHaveInitialTags: false,
    renderedTags: LazyAny {
      producer: [Object],
      cache: true,
      creationStack: [Array],
      options: {}
    }
  },
  tagsRaw: undefined,
  timeout: 10,
  tracingConfig: { mode: 'Active' },
  vpcConfig: undefined,
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnOutput {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [ [Object] ],
    id: 'SSTStackOutputf1Name',
    scope: EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.SSTStackOutputf1Name.LogicalID.736]}',
  _description: undefined,
  _value: '${Token[TOKEN.703]}',
  _condition: undefined,
  _exportName: undefined,
  _logicalIdOverride: 'f1Name',
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}
<ref *1> CfnOutput {
  node: Node {
    host: [Circular *1],
    _locked: false,
    _children: {},
    _context: {},
    _metadata: [ [Object] ],
    _dependencies: Set(0) {},
    _validations: [ [Object] ],
    id: 'SSTStackOutputf1Url',
    scope: EmptyStack {
      node: [Node],
      _missingContext: [],
      _stackDependencies: {},
      templateOptions: {},
      _crossRegionReferences: false,
      _suppressTemplateIndentation: false,
      _logicalIds: [LogicalIDs],
      account: '112245769880',
      region: 'us-east-1',
      environment: 'aws://112245769880/us-east-1',
      terminationProtection: undefined,
      _stackName: 'dev-playground-demo',
      tags: [TagManager],
      artifactId: 'dev-playground-demo',
      templateFile: 'dev-playground-demo.template.json',
      _versionReportingEnabled: undefined,
      synthesizer: [DefaultStackSynthesizer],
      stage: 'dev',
      defaultFunctionProps: [Array],
      customResourceHandler: [Function],
      isActive: true,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    }
  },
  stack: <ref *2> EmptyStack {
    node: Node {
      host: [Circular *2],
      _locked: false,
      _children: [Object],
      _context: {},
      _metadata: [],
      _dependencies: Set(0) {},
      _validations: [],
      id: 'dev-playground-demo',
      scope: [App]
    },
    _missingContext: [],
    _stackDependencies: {},
    templateOptions: {},
    _crossRegionReferences: false,
    _suppressTemplateIndentation: false,
    _logicalIds: LogicalIDs { renames: {}, reverse: {} },
    account: '112245769880',
    region: 'us-east-1',
    environment: 'aws://112245769880/us-east-1',
    terminationProtection: undefined,
    _stackName: 'dev-playground-demo',
    tags: TagManager {
      tags: Map(0) {},
      priorities: Map(0) {},
      externalTagPriority: 50,
      resourceTypeName: 'aws:cdk:stack',
      tagFormatter: KeyValueFormatter {},
      tagPropertyName: 'tags',
      didHaveInitialTags: false,
      renderedTags: [LazyAny]
    },
    artifactId: 'dev-playground-demo',
    templateFile: 'dev-playground-demo.template.json',
    _versionReportingEnabled: undefined,
    synthesizer: DefaultStackSynthesizer {
      _boundStack: [Circular *2],
      qualifier: 'hnb659fds',
      bucketName: 'cdk-hnb659fds-assets-112245769880-us-east-1',
      repositoryName: 'cdk-hnb659fds-container-assets-112245769880-us-east-1',
      _deployRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-deploy-role-112245769880-us-east-1',
      _cloudFormationExecutionRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-cfn-exec-role-112245769880-us-east-1',
      fileAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-file-publishing-role-112245769880-us-east-1',
      imageAssetPublishingRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-image-publishing-role-112245769880-us-east-1',
      lookupRoleArn: 'arn:${AWS::Partition}:iam::112245769880:role/cdk-hnb659fds-lookup-role-112245769880-us-east-1',
      bucketPrefix: '',
      dockerTagPrefix: '',
      bootstrapStackVersionSsmParameter: '/cdk-bootstrap/hnb659fds/version'
    },
    stage: 'dev',
    defaultFunctionProps: [ [Object] ],
    customResourceHandler: Function {
      node: [Node],
      stack: [Circular *2],
      env: [Object],
      _physicalName: undefined,
      _allowCrossEnvironment: false,
      physicalName: '${Token[TOKEN.659]}',
      _warnIfCurrentVersionCalled: false,
      _invocationGrants: {},
      _functionUrlInvocationGrants: {},
      permissionsNode: [Node],
      canCreatePermissions: true,
      _layers: [],
      environment: {},
      hashMixins: [],
      role: [Role],
      grantPrincipal: [Role],
      _architecture: undefined,
      functionName: '${Token[TOKEN.678]}',
      functionArn: '${Token[TOKEN.679]}',
      runtime: [Runtime],
      timeout: [Duration],
      architecture: [Architecture],
      currentVersionOptions: undefined,
      [Symbol(@aws-cdk/core.DependableTrait)]: [Object]
    },
    isActive: true,
    [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [Array] }
  },
  logicalId: '${Token[dev-playground-demo.SSTStackOutputf1Url.LogicalID.737]}',
  _description: undefined,
  _value: '${Token[TOKEN.708]}',
  _condition: undefined,
  _exportName: undefined,
  _logicalIdOverride: 'f1Url',
  [Symbol(@aws-cdk/core.DependableTrait)]: { dependencyRoots: [ [Circular *1] ] }
}

✔  Built: 1 stack to .sst/dist
